# Random module implements pseudo-random number generators for various distributions
import random

# Accepts no arguments, collect a string value from the user, and returns the collected
# string value: (P or p), (R or r), or (S or s).
def collectStringInput():
    # Input and validation: prompt the user to enter a valid choice
    while (True):
        print("Enter [R]ock, [P]aper, or [S]cissor")
        userChoice = input("Player: ")
        if (userChoice.isalpha() == False):
            print("Error: invalid choice, please choose again.")
            print('\n')
            continue
        else:
            if (userChoice != 'r' and userChoice != 'R' and userChoice != 'p' and userChoice != 'P' and
                    userChoice != 's' and userChoice != 'S'):
                print("Error: choice must be chosen from 'R', 'P', 'S'.")
                print('\n')
                continue
            else:
                break
    return userChoice

# Accepts no arguments, randomly generates an integer number, and returns the generated integer number.
def generateIntegerValue():
    # RandNum gets a random integer between 1 and 777, store different values into variable intChoose base on
    # randNum mod 3.
    randNum = random.randint(1, 777)
    if (randNum % 3 == 0):
        intChoose = 1;
    elif (randNum % 3 == 1):
        intChoose = 2;
    elif (randNum % 3 == 2):
        intChoose = 3;
    return intChoose


# Accepts the integer number generated by generateIntegerValue() as an argument and returns a string value:
# (P or p), (R or r), or (S or s).
def convertIntegertoRPS(intChoose):
    # Computer "chooses" from 'r', 'p', 's' base on the value of intChoose
    if (intChoose == 0):
        print("Computer's selection: r")
        return 'r'
    elif (intChoose == 1):
        print("Computer's selection: p")
        return 'p'
    elif (intChoose == 2):
        print("Computer's selection: s")
        return 's'


# Accepts the value returned by collectStringInput() as an argument and the value returned by
# convertIntegerToRPS() and returns a string value (announces the winner).
def evaluateWinning(playerChoice, computerChoice):
    # Initialize variable winning
    winning = " "
    # Compare different circumstances and determine a winner
    if (playerChoice == computerChoice):
        winning = "Tie!"
    elif (playerChoice == 'r' and computerChoice == 's'):
        winning = "Rock beats scissors. \nPlayer WINS!"
    elif (playerChoice == 's' and computerChoice == 'p'):
        winning = "Scissors cut paper. \nPlayer WINS!"
    elif (playerChoice == 'p' and computerChoice == 'r'):
        winning = "Paper wraps up rock. \nPlayer WINS!"
    elif (computerChoice == 'r' and playerChoice == 's'):
        winning = "Rock beats scissors. \nComputer WINS!"
    elif (computerChoice == 's' and playerChoice == 'p'):
        winning = "Scissors cut paper. \nComputer WINS!"
    elif (computerChoice == 'p' and playerChoice == 'r'):
        winning = "Paper wraps up rock. \nComputer WINS!"
    return winning


# Invocation: call function collectStringInput() and stores its returned value into variable playerChoice.
playerChoice = collectStringInput()
print("\n")

# Invocation: call function generateIntegerValue() and stores its returned value into variable intChoose.
intChoose = generateIntegerValue()

# Invocation: call function covertIntegertoRPS with the argument intChoose and stores its returned value into
# variable computerChoice.
computerChoice = convertIntegertoRPS(intChoose)
print('\n')

# Invocation: call function evaluateWinning with arguments playerChoice and computerChoice, stores its returned
# value into variable result, then print out result.
result = evaluateWinning(playerChoice.lower(), computerChoice)
print(result)
